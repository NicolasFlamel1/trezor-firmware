// This file is automatically generated from mimblewimble_coin_coin_info.c.mako
// DO NOT EDIT

// Header files
#include <stdint.h>
#include "mimblewimble_coin_coin_info.h"
#include "mimblewimble_coin_coins.h"


// Constants

// Coins
const MimbleWimbleCoinCoinInfo mimbleWimbleCoinCoins[MIMBLEWIMBLE_COIN_COINS_COUNT] = {
% for c in supported_on("T1B1", mimblewimble_coin):
	{
		.name = ${c_str(c.name)},
		.coinType = MimbleWimbleCoinCoinType_${c.coin_type.upper()},
		.networkType = MimbleWimbleCoinNetworkType_${"TESTNET" if c.is_testnet else "MAINNET"},
		.slip44 = ${c.slip44},
		.fractionalDigits = ${c.fractional_digits},
		.enableMqsAddress = ${"true" if c.enable_mqs_address is True else "false"},
		.enableTorAddress = ${"true" if c.enable_tor_address is True else "false"},
		.enableSlatepackAddress = ${"true" if c.enable_slatepack_address is True else "false"},
		.enableNoRecentDuplicateKernels = ${"true" if c.enable_no_recent_duplicate_kernels is True else "false"},
		.mqsVersion = {${",".join(map(lambda x: str(x), c.mqs_version))}},
		.slatepackAddressHumanReadablePart = ${c_str(c.slatepack_address_human_readable_part)},
		.maximumFee = ${c.maximum_fee},
		.addressDerivationType = MimbleWimbleCoinAddressDerivationType_${c.address_derivation_type}_ADDRESS_DERIVATION,
		.paymentProofMessageType = MimbleWimbleCoinPaymentProofMessageType_${c.payment_proof_message_type}_PAYMENT_PROOF_MESSAGE,
		.supportedPaymentProofAddressTypes = ${"|".join(map(lambda x: "MimbleWimbleCoinPaymentProofAddressType_" + x + "_PAYMENT_PROOF_ADDRESS", c.payment_proof_address_types))},
		.supportedSlateEncryptionTypes = ${"|".join(map(lambda x: "MimbleWimbleCoinSlateEncryptionType_" + x + "_SLATE_ENCRYPTION", c.slate_encryption_types))},
		.mqsName = ${c_str(c.mqs_name)},
	},
% endfor
};
